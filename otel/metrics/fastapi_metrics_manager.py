from typing import Tuple

from .otel_global_attributes import get_global_attributes


class FastAPIMetricsManager:
    """
    A manager class for handling FastAPI application metrics using OpenTelemetry.

    This class sets up various metrics related to FastAPI applications, such as request counts,
    response counts, request processing times, exceptions, and requests in progress.

    Attributes:
        meter: The OpenTelemetry meter used for creating and recording metrics.
    """

    def __init__(self, meter):
        """
        Initializes the FastAPIMetricsManager with the provided OpenTelemetry meter.

        Args:
            meter: An OpenTelemetry meter instance for creating metrics.
        """
        self.meter = meter
        self._setup()

    def _setup(self):
        """
        Sets up the various metrics for monitoring FastAPI applications.

        This method creates counters, histograms, and gauges for tracking FastAPI-related metrics.
        """
        self.app_info = self.meter.create_up_down_counter(
            name="fastapi_app_info",
            description="FastAPI application information.",
        )

        self.fastapi_requests_received_count = self.meter.create_counter(
            name="fastapi_requests_received_count",
            description="Total count of requests by method and path.",
        )

        self.fastapi_requests_duration_milliseconds = self.meter.create_histogram(
            name="fastapi_requests_duration_milliseconds",
            description="Histogram of request processing time by path (in milliseconds).",
        )

    def register_for_metrics(self, app, app_name: str):
        """
        Registers the FastAPI application for metrics tracking using the provided app name.

        Args:
            app: The FastAPI application instance.
            app_name (str): The name of the FastAPI application.
        """
        import time
        from opentelemetry import trace
        from starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint
        from starlette.types import ASGIApp
        from starlette.requests import Request
        from starlette.responses import Response
        from starlette.routing import Match
        from starlette.status import HTTP_500_INTERNAL_SERVER_ERROR

        class OpenTelemetryMiddleware(BaseHTTPMiddleware):
            """
            Middleware class to collect and record metrics for each request and response in a FastAPI application.
            """

            def __init__(self, app: ASGIApp, app_name: str, metrics_manager: FastAPIMetricsManager) -> None:
                super().__init__(app)
                self.app_name = app_name
                self.metrics_manager = metrics_manager
                self.metrics_manager.app_info.add(1, {"app_name": self.app_name, "service_name": self.app_name})

            def get_attributes(self, request: Request, extra_attributes: dict = {}) -> dict:
                """
                Constructs the attributes dictionary for a given request.

                Args:
                    request (Request): The incoming HTTP request.
                    extra_attributes (dict): Additional attributes to include.

                Returns:
                    dict: A dictionary of attributes for the metrics.
                """
                attributes = get_global_attributes()
                attributes.update({
                    "method": request.method,
                    "path": request.url.path,
                    "app_name": self.app_name,
                    "service_name": self.app_name
                })
                attributes.update(extra_attributes)
                return attributes

            async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -> Response:
                """
                Processes the incoming request, records metrics, and forwards it to the next handler.

                Args:
                    request (Request): The incoming HTTP request.
                    call_next (RequestResponseEndpoint): The next handler in the middleware chain.

                Returns:
                    Response: The HTTP response generated by the application.
                """
                method = request.method
                path, is_handled_path = self.get_path(request)
                status_code = 0
                exception_type = None
                response = None

                if not is_handled_path:
                    return await call_next(request)

                self.metrics_manager.fastapi_requests_received_count.add(1, self.get_attributes(request))
                before_time = time.perf_counter()

                try:
                    response = await call_next(request)
                    status_code = response.status_code
                except BaseException as e:
                    status_code = HTTP_500_INTERNAL_SERVER_ERROR
                    exception_type = type(e).__name__
                finally:
                    after_time = time.perf_counter()
                    time_in_milliseconds = (after_time - before_time) * 1000

                    # Retrieve trace id for linking metrics to traces
                    span = trace.get_current_span()
                    trace_id = trace.format_trace_id(span.get_span_context().trace_id)

                    extra_attributes = {
                        "TraceID": trace_id,
                        "status_code": status_code,
                        "exception_type": exception_type,
                        "path": path,
                        "method": method
                    }

                    self.metrics_manager.fastapi_requests_duration_milliseconds.record(
                        time_in_milliseconds,
                        self.get_attributes(request, extra_attributes)
                    )

                return response

            @staticmethod
            def get_path(request: Request) -> Tuple[str, bool]:
                """
                Determines the route path for the given request.

                Args:
                    request (Request): The incoming HTTP request.

                Returns:
                    Tuple[str, bool]: A tuple containing the route path and a boolean indicating if it's handled.
                """
                for route in request.app.routes:
                    match, child_scope = route.matches(request.scope)
                    if match == Match.FULL:
                        return route.path, True

                return request.url.path, False

        app.add_middleware(OpenTelemetryMiddleware, app_name=app_name, metrics_manager=self)
